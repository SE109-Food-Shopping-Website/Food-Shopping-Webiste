generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model REFERENCE {
  name  String @id
  value String
}

model ROLE {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  users USER[]
}

model USER {
  id         Int               @id @default(autoincrement())
  email      String            @unique
  password   String
  name       String
  phone      String            @unique
  birthday   DateTime?         @db.Date
  gender     USER_gender_enum?
  address    String?
  loyalty_point  Int           @default(0)              
  user_rank_id   Int?                          
  isActive   Boolean           @default(true)
  role_id    Int?
  created_at DateTime          @db.Date
  carts      CART[]
  feedback   FEEDBACK[]
  orders     ORDER[]
  promotionUsers PROMOTION_USER[]
  role       ROLE?             @relation(fields: [role_id], references: [id])
  user_rank      USER_RANK?        @relation(fields: [user_rank_id], references: [id])
}

model USER_RANK {
  id              Int     @id @default(autoincrement())
  name            String
  min_point       Int
  max_promotion   Float
  discount_percent Float
  max_discount    Float

  users           USER[]
}


model PRODUCT_TYPE {
  id             Int       @id @default(autoincrement())
  name           String
  priceMarginPct Float     @default(0)
  products       PRODUCT[]
  coupons        COUPON[]
}

model PROVIDER {
  id       Int       @id @default(autoincrement())
  name     String
  address  String?
  email    String?   @unique
  imports  IMPORT[]
  products PRODUCT[]
}

model PRODUCT {
  id             Int              @id @default(autoincrement())
  name           String
  price          Float
  images         String?
  description    String?
  unit           String
  quantity       Int              @default(0)
  sold           Int              @default(0)
  provider_id    Int?
  productType_id Int?
  cartDetails    CART_DETAILS[]
  feedbacks      FEEDBACK[]
  importDetails  IMPORT_DETAILS[]
  orderDetails   ORDER_DETAILS[]
  productType    PRODUCT_TYPE?    @relation(fields: [productType_id], references: [id])
  provider       PROVIDER?        @relation(fields: [provider_id], references: [id])
}

model IMPORT {
  id            Int              @id @default(autoincrement())
  totalPrice    Float
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now())
  provider_id   Int?
  provider      PROVIDER?        @relation(fields: [provider_id], references: [id])
  importDetails IMPORT_DETAILS[]
}

model IMPORT_DETAILS {
  id         Int     @id @default(autoincrement())
  import_id  Int
  product_id Int
  price      Float
  quantity   Int
  import     IMPORT  @relation(fields: [import_id], references: [id])
  product    PRODUCT @relation(fields: [product_id], references: [id])
}

model CART {
  id          Int            @id @default(autoincrement())
  user_id     Int?
  user        USER?          @relation(fields: [user_id], references: [id])
  cartDetails CART_DETAILS[]
}

model CART_DETAILS {
  id         Int     @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int
  cart       CART    @relation(fields: [cart_id], references: [id])
  product    PRODUCT @relation(fields: [product_id], references: [id])
}

model ORDER {
  id             Int               @id @default(autoincrement())
  status         ORDER_status_enum @default(PENDING)
  note           String?
  originalPrice  Float
  discountAmount Float             @default(0)
  totalPrice     Float
  shippingFee    Float             @default(0)
  created_at     DateTime          @default(now())
  paid_at        DateTime?
  user_id        Int?
  promotion_id   Int?
  address        String?
  name           String?
  phone          String?
  reason         String?
  form_submitted_at DateTime? 
  PROMOTION      PROMOTION?        @relation(fields: [promotion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           USER?             @relation(fields: [user_id], references: [id])
  orderDetails   ORDER_DETAILS[]
  feedbacks  FEEDBACK[] // Một đơn hàng có thể có nhiều feedback
}

model ORDER_DETAILS {
  id            Int     @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  originalPrice Float?
  salePrice     Float?
  price         Float   @default(0)
  order         ORDER   @relation(fields: [order_id], references: [id])
  product       PRODUCT @relation(fields: [product_id], references: [id])
}

model FEEDBACK {
  id         Int      @id @default(autoincrement())
  comment    String?
  images     String?
  rating     Int?
  created_at DateTime @default(now())
  order_id    Int?
  product_id Int
  user_id    Int
  order       ORDER?   @relation(fields: [order_id], references: [id])
  product    PRODUCT  @relation(fields: [product_id], references: [id])
  user       USER     @relation(fields: [user_id], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PROMOTION {
  id           Int       @id @default(autoincrement())
  name         String
  day_start    DateTime? @db.Timestamptz(6)
  day_end      DateTime? @db.Timestamptz(6)
  value        Float?    @db.Real
  order_min    Float?    @db.Real
  discount_max Float?    @db.Real
  status       String?
  ORDER        ORDER[]
  promotionUsers PROMOTION_USER[]
}

model COUPON {
  id               Int           @id @default(autoincrement())
  name             String
  start_at         DateTime
  end_at           DateTime
  discount_percent Float
  status           String?
  product_type_id  Int?
  productType      PRODUCT_TYPE? @relation(fields: [product_type_id], references: [id])
}

model PROMOTION_USER {
  id           Int       @id @default(autoincrement())
  promotion_id Int
  user_id      Int
  used_at      DateTime?
  promotion    PROMOTION @relation(fields: [promotion_id], references: [id])
  user         USER      @relation(fields: [user_id], references: [id])
}


enum USER_gender_enum {
  Male
  Female
  Other
}

enum ORDER_status_enum {
  PENDING
  PROCESSING
  SHIPPING
  COMPLETED
  CANCELLED
  RETURN
  REQUEST
}
